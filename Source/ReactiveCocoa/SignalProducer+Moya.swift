import Foundation
import ReactiveCocoa
import Result

/// Extension for processing raw NSData generated by network access.
extension SignalProducerType where Value == MoyaResponse, Error == MoyaError {

    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    public func filterStatusCodes(range: ClosedInterval<Int>) -> SignalProducer<Value, Error> {
        return producer.flatMap(.Latest) { response -> SignalProducer<Value, Error> in
            return SignalProducer(result: unwrapThrowable { try response.filterStatusCodes(range) })
        }
    }
    
    public func filterStatusCode(code: Int) -> SignalProducer<Value, Error> {
        return filterStatusCodes(code...code)
    }
    
    public func filterSuccessfulStatusCodes() -> SignalProducer<Value, Error> {
        return filterStatusCodes(200...299)
    }
    
    public func filterSuccessfulStatusAndRedirectCodes() -> SignalProducer<Value, Error> {
        return filterStatusCodes(200...399)
    }
    
    /// Maps data received from the signal into an Image. If the conversion fails, the signal errors.
    public func mapImage() -> SignalProducer<Image, Error> {
        return producer.flatMap(.Latest) { response -> SignalProducer<Image, Error> in
            return SignalProducer(result: unwrapThrowable { try response.mapImage() })
        }
    }
    
    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    public func mapJSON() -> SignalProducer<AnyObject, Error> {
        return producer.flatMap(.Latest) { response -> SignalProducer<AnyObject, Error> in
            return SignalProducer(result: unwrapThrowable { try response.mapJSON() })
        }
    }
    
    /// Maps data received from the signal into a String. If the conversion fails, the signal errors.
    public func mapString() -> SignalProducer<String, Error> {
        return producer.flatMap(.Latest) { response -> SignalProducer<String, Error> in
            return SignalProducer(result: unwrapThrowable { try response.mapString() })
        }
    }
}

/// The initializer for `Result` does not seem to do the trick; this gives us the assertion to cast to MoyaError anyway.
private func unwrapThrowable<T>(throwable: () throws -> T) -> Result<T, MoyaError> {
  do {
    let value = try throwable()
    return Result(value: value)
  } catch {
    return Result(error: error as! MoyaError)
  }
}
